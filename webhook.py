# Import necessary modules
import glob
import os
import chess
import chess.pgn
import chess.svg
import chess.engine
import cairosvg
from discord_webhook import DiscordWebhook, DiscordEmbed
from io import BytesIO

# Define a function to get the last modified PGN file
def get_last_modified(path):
    list_of_files = sorted(glob.glob(path + '/*.pgn'))
    return 'games/current.pgn' if 'games/current.pgn' in list_of_files else list_of_files[-1]

# Define a function to load the board from a PGN file
def load_board(file):
    with open(file) as pgn_file:
        game = chess.pgn.read_game(pgn_file)
        board = game.board()

    # Play all the moves from the game on the board
    for move in game.mainline_moves():
        board.push(move)

    return board

# Define a function to generate a PNG image from an SVG image
def generate_png(svg):
    out = BytesIO()
    cairosvg.svg2png(bytestring=svg, write_to=out)
    out.seek(0)

    return out

# Define a function to convert a move to Standard Algebraic Notation (SAN)
def move_to_san(board, move):
    if move is None:
        return "None"

    return str(board.fullmove_number) + ('... ' if board.turn == chess.BLACK else '. ') + board.san(move)

# Define a function to get the evaluation of the board using a chess engine
def get_evaluation(board, time_limit):
    stockfish_path = os.environ['STOCKFISH_PATH'] # Get the path to the Stockfish chess engine
    engine = chess.engine.SimpleEngine.popen_uci(stockfish_path) # Open the engine process
    info = engine.analyse(board, chess.engine.Limit(time=time_limit)) # Analyze the board for the specified time limit
    engine.quit() # Close the engine process

    score = info['score'].white()
    next_move = move_to_san(board, info['pv'][0] if 'pv' in info else None)
    mate = score.mate()
    score = score.score()

    if mate is not None:
        return '#{:+d}'.format(mate), next_move
    else:
        return '{:+.2f}'.format(score / 100), next_move

# Define a function to send a Discord webhook with the current board state and evaluation
def send_webhook(png, last_move, pts, move, board):
    webhook_url = os.environ['WEBHOOK_URL'] # Get the Discord webhook URL from an environment variable
    webhook = DiscordWebhook(url=webhook_url, username='README Chess', avatar_url='https://github.com/ChessCom.png') # Create a new Discord webhook

    # Add the PNG image of the board to the webhook
    webhook.add_file(file=png.read(), filename='image.png')

    # Create a new Discord embed with information about the last move and evaluation
    embed = DiscordEmbed(title=last_move, description='New move played', color=(0xefefef if board.turn == chess.WHITE else 0x303030))
    embed.set_footer(text='Generated by marcizhu/readme-chess')
    embed.set_timestamp()
    embed.add_embed_field(name='Evaluation', value=pts)
    embed.add_embed_field(name='Next best move', value=move)
    embed.set_image(url='attachment://image.png')

    # Add the embed to the webhook and execute it
    webhook.add_embed(embed)
    webhook.execute()

# Define a function to style the chess board
